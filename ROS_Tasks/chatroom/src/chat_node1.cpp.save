#include <ros/ros.h>
#include <std_msgs/String.h>
#include <boost/thread.hpp>

class ChatNode {
public:
    ChatNode() {
        // Initialize ROS node handle
        nh = ros::NodeHandle();

        // Subscribe to the chat topic
        chat_subscriber = nh.subscribe("chat", 1000, &ChatNode::chatCallback, this);

        // Publisher for sending messages
        chat_publisher = nh.advertise<std_msgs::String>("chat", 1000);

        // Start the listening thread
        boost::thread listening_thread(&ChatNode::listenForMessages, this);
    }

    void listenForMessages() {
        ros::spin();
    }

sendMessage(const std::string& message) {
        std_msgs::String msg;
        msg.data = message;
        chat_publisher.publish(msg);
    }

private:
    ros::NodeHandle nh;
    ros::Publisher chat_publisher;
    ros::Subscriber chat_subscriber;
};

int main(int argc, char **argv) {
    ros::init(argc, argv, "chat_node");

    ChatNode chatNode;

    std::string input_message;
    while (ros::ok()) {
        std::getline(std::cin, input_message);
        chatNode.sendMessage(input_message);
    }

    return 0;
}
